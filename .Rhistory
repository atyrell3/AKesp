values_from = .data$status
) %>%
dplyr::rename(Indicator = .data$name,
"Indicator category" = .data$CATEGORY)
color_dat <- dat %>%
dplyr::select(.data$CATEGORY, .data$name, .data$YEAR, .data$status,
.data$SIGN, .data$color)
#
#   for (i in 1:nrow(color_dat)) {
#     if(is.na(color_dat$SIGN[i])){
#       color_dat$color[i] <- "white"
#     } else if (color_dat$status[i] == "low" & color_dat$SIGN[i] == -1) {
#       color_dat$color[i] <- "cornflowerblue"
#     } else if (color_dat$status[i] == "high" & color_dat$SIGN[i] == 1) {
#       color_dat$color[i] <- "cornflowerblue"
#     } else if (color_dat$status[i] == "high" & color_dat$SIGN[i] == -1) {
#       color_dat$color[i] <- "brown1"
#     } else if (color_dat$status[i] == "low" & color_dat$SIGN[i] == 1) {
#       color_dat$color[i] <- "brown1"
#     }
#   }
color_dat <- color_dat %>%
tidyr::pivot_wider(
id_cols = c(.data$CATEGORY, .data$name),
names_from = .data$YEAR,
values_from = .data$color
) %>%
dplyr::rename(Indicator = .data$name)
print(color_dat)
colnames(tbl_dat)[3:ncol(tbl_dat)] <- paste(colnames(tbl_dat)[3:ncol(tbl_dat)], "Status")
flextable::set_flextable_defaults(na_str = "NA")
ft <- flextable::flextable(tbl_dat) %>%
flextable::theme_vanilla() %>%
flextable::set_caption(caption = cap) %>%
flextable::autofit() %>%
flextable::align(align = "center", j = 3:ncol(tbl_dat)) %>%
flextable::bg(i = 2:nrow(tbl_dat), j = ncol(tbl_dat), bg = "gray80")
for (j in 3:ncol(tbl_dat)) {
for (i in seq_len(nrow(tbl_dat))) {
ft <- flextable::bg(ft, i = i, j = j, bg = as.character(color_dat[i, j]))
}
}
ft <- ft %>%
flextable::merge_v(j = 1)
return(ft)
}
# AKFIN data doesn't have `SCORE` yet, so doesn't run
devtools::load_all()
rmarkdown::render(here::here("inst/esp-report-card-template.Rmd"),
clean = FALSE,
params = list(esp_data = get_esp_data("Alaska Sablefish"),
fish = "Sablefish",
region = "Alaska"))
esp_traffic_tab_long <- function(data, year, cap = "Traffic light scoring") {
dat <- data %>%
dplyr::group_by(.data$INDICATOR_NAME) %>%
dplyr::mutate(
name = .data$INDICATOR_NAME %>%
stringr::str_replace_all("_", " ") %>%
stringr::str_to_sentence(),
this_year = (.data$YEAR %in% year),
avg = mean(.data$DATA_VALUE,
na.rm = TRUE
),
stdev = stats::sd(.data$DATA_VALUE,
na.rm = TRUE
)
) %>%
dplyr::filter(.data$this_year == TRUE) %>%
dplyr::select(.data$CATEGORY, .data$YEAR, .data$name, .data$DATA_VALUE,
.data$avg, .data$stdev, .data$SIGN) %>%
dplyr::arrange(.data$CATEGORY, .data$name)
status <- c()
color <- c()
for (i in seq_len(nrow(dat))) {
# print(data$SIGN[i])
if (is.na(dat$DATA_VALUE[i])) {
status[i] <- "NA"
color[i] <- "gray80"
} else if (dat$DATA_VALUE[i] > (dat$avg[i] + dat$stdev[i])) {
status[i] <- "high"
if(is.na(dat$SIGN[i])){
color[i] <- "white"
} else if(dat$SIGN[i] == 1){
color[i] <- "cornflowerblue"
} else if(dat$SIGN[i] == -1){
color[i] <- "brown1"
}
} else if (dat$DATA_VALUE[i] < (dat$avg[i] - dat$stdev[i])) {
status[i] <- "low"
if(is.na(dat$SIGN[i])){
color[i] <- "white"
} else if(dat$SIGN[i] == -1){
color[i] <- "cornflowerblue"
} else if(dat$SIGN[i] == 1){
color[i] <- "brown1"
}
} else {
status[i] <- "neutral"
color[i] <- "white"
}
}
# message(status)
#  message(color)
dat$status <- status
dat$color <- color
# color of cell = SIGN
# words in cell = status
tbl_dat <- dat %>%
dplyr::select(.data$CATEGORY, .data$name, .data$YEAR, .data$status) %>%
tidyr::pivot_wider(
id_cols = c(.data$CATEGORY, .data$name),
names_from = .data$YEAR,
values_from = .data$status
) %>%
dplyr::rename(Indicator = .data$name,
"Indicator category" = .data$CATEGORY)
color_dat <- dat %>%
dplyr::select(.data$CATEGORY, .data$name, .data$YEAR, .data$status,
.data$SIGN, .data$color)
#
#   for (i in 1:nrow(color_dat)) {
#     if(is.na(color_dat$SIGN[i])){
#       color_dat$color[i] <- "white"
#     } else if (color_dat$status[i] == "low" & color_dat$SIGN[i] == -1) {
#       color_dat$color[i] <- "cornflowerblue"
#     } else if (color_dat$status[i] == "high" & color_dat$SIGN[i] == 1) {
#       color_dat$color[i] <- "cornflowerblue"
#     } else if (color_dat$status[i] == "high" & color_dat$SIGN[i] == -1) {
#       color_dat$color[i] <- "brown1"
#     } else if (color_dat$status[i] == "low" & color_dat$SIGN[i] == 1) {
#       color_dat$color[i] <- "brown1"
#     }
#   }
color_dat <- color_dat %>%
tidyr::pivot_wider(
id_cols = c(.data$CATEGORY, .data$name),
names_from = .data$YEAR,
values_from = .data$color
) %>%
dplyr::rename(Indicator = .data$name)
knitr::kable(color_dat)
colnames(tbl_dat)[3:ncol(tbl_dat)] <- paste(colnames(tbl_dat)[3:ncol(tbl_dat)], "Status")
flextable::set_flextable_defaults(na_str = "NA")
ft <- flextable::flextable(tbl_dat) %>%
flextable::theme_vanilla() %>%
flextable::set_caption(caption = cap) %>%
flextable::autofit() %>%
flextable::align(align = "center", j = 3:ncol(tbl_dat)) %>%
flextable::bg(i = 2:nrow(tbl_dat), j = ncol(tbl_dat), bg = "gray80")
for (j in 3:ncol(tbl_dat)) {
for (i in seq_len(nrow(tbl_dat))) {
ft <- flextable::bg(ft, i = i, j = j, bg = as.character(color_dat[i, j]))
}
}
ft <- ft %>%
flextable::merge_v(j = 1)
return(ft)
}
# AKesp::bbrkc_long is the only data I have that has the `SCORE` column
# report renders in the `inst` folder (can change later)
# replace dummy figure paths with path to real figures (path relative to `inst` folder)
# figure captions/numbers are not perfect, but should at least be a good starting point
# sample text was copied from the sablefish report card
devtools::load_all()
rmarkdown::render(here::here("inst/esp-report-card-template.Rmd"),
clean = FALSE,
params = list(esp_data = get_esp_data("Alaska Sablefish"),
fish = "Sablefish",
region = "Alaska"))
?tidyr::pivot_wider
esp_traffic_tab_long <- function(data, year, cap = "Traffic light scoring") {
dat <- data %>%
dplyr::group_by(.data$INDICATOR_NAME) %>%
dplyr::mutate(
name = .data$INDICATOR_NAME %>%
stringr::str_replace_all("_", " ") %>%
stringr::str_to_sentence(),
this_year = (.data$YEAR %in% year),
avg = mean(.data$DATA_VALUE,
na.rm = TRUE
),
stdev = stats::sd(.data$DATA_VALUE,
na.rm = TRUE
)
) %>%
dplyr::filter(.data$this_year == TRUE) %>%
dplyr::select(.data$CATEGORY, .data$YEAR, .data$name, .data$DATA_VALUE,
.data$avg, .data$stdev, .data$SIGN) %>%
dplyr::arrange(.data$CATEGORY, .data$name)
status <- c()
color <- c()
for (i in seq_len(nrow(dat))) {
# print(data$SIGN[i])
if (is.na(dat$DATA_VALUE[i])) {
status[i] <- "NA"
color[i] <- "gray80"
} else if (dat$DATA_VALUE[i] > (dat$avg[i] + dat$stdev[i])) {
status[i] <- "high"
if(is.na(dat$SIGN[i])){
color[i] <- "white"
} else if(dat$SIGN[i] == 1){
color[i] <- "cornflowerblue"
} else if(dat$SIGN[i] == -1){
color[i] <- "brown1"
}
} else if (dat$DATA_VALUE[i] < (dat$avg[i] - dat$stdev[i])) {
status[i] <- "low"
if(is.na(dat$SIGN[i])){
color[i] <- "white"
} else if(dat$SIGN[i] == -1){
color[i] <- "cornflowerblue"
} else if(dat$SIGN[i] == 1){
color[i] <- "brown1"
}
} else {
status[i] <- "neutral"
color[i] <- "white"
}
}
# message(status)
#  message(color)
dat$status <- status
dat$color <- color
# color of cell = SIGN
# words in cell = status
tbl_dat <- dat %>%
dplyr::select(.data$CATEGORY, .data$name, .data$YEAR, .data$status) %>%
tidyr::pivot_wider(
id_cols = c(.data$CATEGORY, .data$name),
names_from = .data$YEAR,
values_from = .data$status
) %>%
dplyr::rename(Indicator = .data$name,
"Indicator category" = .data$CATEGORY)
color_dat <- dat %>%
dplyr::select(.data$CATEGORY, .data$name, .data$YEAR, .data$status,
.data$SIGN, .data$color)
#
#   for (i in 1:nrow(color_dat)) {
#     if(is.na(color_dat$SIGN[i])){
#       color_dat$color[i] <- "white"
#     } else if (color_dat$status[i] == "low" & color_dat$SIGN[i] == -1) {
#       color_dat$color[i] <- "cornflowerblue"
#     } else if (color_dat$status[i] == "high" & color_dat$SIGN[i] == 1) {
#       color_dat$color[i] <- "cornflowerblue"
#     } else if (color_dat$status[i] == "high" & color_dat$SIGN[i] == -1) {
#       color_dat$color[i] <- "brown1"
#     } else if (color_dat$status[i] == "low" & color_dat$SIGN[i] == 1) {
#       color_dat$color[i] <- "brown1"
#     }
#   }
color_dat <- color_dat %>%
tidyr::pivot_wider(
id_cols = c(.data$CATEGORY, .data$name),
names_from = .data$YEAR,
values_from = .data$color,
values_fill = "grey80"
) %>%
dplyr::rename(Indicator = .data$name)
colnames(tbl_dat)[3:ncol(tbl_dat)] <- paste(colnames(tbl_dat)[3:ncol(tbl_dat)], "Status")
flextable::set_flextable_defaults(na_str = "NA")
ft <- flextable::flextable(tbl_dat) %>%
flextable::theme_vanilla() %>%
flextable::set_caption(caption = cap) %>%
flextable::autofit() %>%
flextable::align(align = "center", j = 3:ncol(tbl_dat))
for (j in 3:ncol(tbl_dat)) {
for (i in seq_len(nrow(tbl_dat))) {
ft <- flextable::bg(ft, i = i, j = j, bg = as.character(color_dat[i, j]))
}
}
ft <- ft %>%
flextable::merge_v(j = 1)
return(ft)
}
esp_traffic_tab_long(data, year = c(2020, 2021))
?dplyr::arrange
levels(data$CATEGORY)
factors(data$CATEGORY)
factor(data$CATEGORY)
esp_traffic_tab_long <- function(data, year, cap = "Traffic light scoring") {
data$CATEGORY <- factor(data$CATEGORY, c("Physical", "Lower Trophic",
"Upper Trophic", "Fishery Performance",
"Economic", "Community"))
dat <- data %>%
dplyr::group_by(.data$INDICATOR_NAME) %>%
dplyr::mutate(
name = .data$INDICATOR_NAME %>%
stringr::str_replace_all("_", " "),
this_year = (.data$YEAR %in% year),
avg = mean(.data$DATA_VALUE,
na.rm = TRUE
),
stdev = stats::sd(.data$DATA_VALUE,
na.rm = TRUE
)
) %>%
dplyr::filter(.data$this_year == TRUE) %>%
dplyr::select(.data$CATEGORY, .data$YEAR, .data$name, .data$DATA_VALUE,
.data$avg, .data$stdev, .data$SIGN) %>%
dplyr::arrange(.data$CATEGORY, .data$name)
status <- c()
color <- c()
for (i in seq_len(nrow(dat))) {
# print(data$SIGN[i])
if (is.na(dat$DATA_VALUE[i])) {
status[i] <- "NA"
color[i] <- "gray80"
} else if (dat$DATA_VALUE[i] > (dat$avg[i] + dat$stdev[i])) {
status[i] <- "high"
if(is.na(dat$SIGN[i])){
color[i] <- "white"
} else if(dat$SIGN[i] == 1){
color[i] <- "cornflowerblue"
} else if(dat$SIGN[i] == -1){
color[i] <- "brown1"
}
} else if (dat$DATA_VALUE[i] < (dat$avg[i] - dat$stdev[i])) {
status[i] <- "low"
if(is.na(dat$SIGN[i])){
color[i] <- "white"
} else if(dat$SIGN[i] == -1){
color[i] <- "cornflowerblue"
} else if(dat$SIGN[i] == 1){
color[i] <- "brown1"
}
} else {
status[i] <- "neutral"
color[i] <- "white"
}
}
# message(status)
#  message(color)
dat$status <- status
dat$color <- color
# color of cell = SIGN
# words in cell = status
tbl_dat <- dat %>%
dplyr::select(.data$CATEGORY, .data$name, .data$YEAR, .data$status) %>%
tidyr::pivot_wider(
id_cols = c(.data$CATEGORY, .data$name),
names_from = .data$YEAR,
values_from = .data$status
) %>%
dplyr::rename(Indicator = .data$name,
"Indicator category" = .data$CATEGORY)
color_dat <- dat %>%
dplyr::select(.data$CATEGORY, .data$name, .data$YEAR, .data$status,
.data$SIGN, .data$color)
#
#   for (i in 1:nrow(color_dat)) {
#     if(is.na(color_dat$SIGN[i])){
#       color_dat$color[i] <- "white"
#     } else if (color_dat$status[i] == "low" & color_dat$SIGN[i] == -1) {
#       color_dat$color[i] <- "cornflowerblue"
#     } else if (color_dat$status[i] == "high" & color_dat$SIGN[i] == 1) {
#       color_dat$color[i] <- "cornflowerblue"
#     } else if (color_dat$status[i] == "high" & color_dat$SIGN[i] == -1) {
#       color_dat$color[i] <- "brown1"
#     } else if (color_dat$status[i] == "low" & color_dat$SIGN[i] == 1) {
#       color_dat$color[i] <- "brown1"
#     }
#   }
color_dat <- color_dat %>%
tidyr::pivot_wider(
id_cols = c(.data$CATEGORY, .data$name),
names_from = .data$YEAR,
values_from = .data$color,
values_fill = "grey80"
) %>%
dplyr::rename(Indicator = .data$name)
colnames(tbl_dat)[3:ncol(tbl_dat)] <- paste(colnames(tbl_dat)[3:ncol(tbl_dat)], "Status")
flextable::set_flextable_defaults(na_str = "NA")
ft <- flextable::flextable(tbl_dat) %>%
flextable::theme_vanilla() %>%
flextable::set_caption(caption = cap) %>%
flextable::autofit() %>%
flextable::align(align = "center", j = 3:ncol(tbl_dat))
for (j in 3:ncol(tbl_dat)) {
for (i in seq_len(nrow(tbl_dat))) {
ft <- flextable::bg(ft, i = i, j = j, bg = as.character(color_dat[i, j]))
}
}
ft <- ft %>%
flextable::merge_v(j = 1)
return(ft)
}
# AKFIN data doesn't have `SCORE` yet, so doesn't run
devtools::load_all()
rmarkdown::render(here::here("inst/esp-report-card-template.Rmd"),
clean = FALSE,
params = list(esp_data = get_esp_data("Alaska Sablefish"),
fish = "Sablefish",
region = "Alaska"))
head(data)
esp_traffic_tab_long <- function(data, year, cap = "Traffic light scoring") {
data$CATEGORY <- factor(data$CATEGORY, c("Physical", "Lower Trophic",
"Upper Trophic", "Fishery Performance",
"Economic", "Community"))
dat <- data %>%
dplyr::group_by(.data$INDICATOR_NAME) %>%
dplyr::mutate(
name = .data$INDICATOR_NAME %>%
stringr::str_replace_all("_", " "),
this_year = (.data$YEAR %in% year),
avg = mean(.data$DATA_VALUE,
na.rm = TRUE
),
stdev = stats::sd(.data$DATA_VALUE,
na.rm = TRUE
)
) %>%
dplyr::filter(.data$this_year == TRUE) %>%
dplyr::select(.data$CATEGORY, .data$YEAR, .data$name, .data$DATA_VALUE,
.data$avg, .data$stdev, .data$SIGN) %>%
dplyr::arrange(.data$CATEGORY, .data$name)
status <- c()
color <- c()
for (i in seq_len(nrow(dat))) {
# print(data$SIGN[i])
if (is.na(dat$DATA_VALUE[i])) {
status[i] <- "NA"
color[i] <- "gray80"
} else if (dat$DATA_VALUE[i] > (dat$avg[i] + dat$stdev[i])) {
status[i] <- "high"
if(is.na(dat$SIGN[i])){
color[i] <- "white"
} else if(dat$SIGN[i] == 1){
color[i] <- "cornflowerblue"
} else if(dat$SIGN[i] == -1){
color[i] <- "brown1"
}
} else if (dat$DATA_VALUE[i] < (dat$avg[i] - dat$stdev[i])) {
status[i] <- "low"
if(is.na(dat$SIGN[i])){
color[i] <- "white"
} else if(dat$SIGN[i] == -1){
color[i] <- "cornflowerblue"
} else if(dat$SIGN[i] == 1){
color[i] <- "brown1"
}
} else {
status[i] <- "neutral"
color[i] <- "white"
}
}
# message(status)
#  message(color)
dat$status <- status
dat$color <- color
# color of cell = SIGN
# words in cell = status
tbl_dat <- dat %>%
dplyr::select(.data$CATEGORY, .data$name, .data$YEAR, .data$status) %>%
tidyr::pivot_wider(
id_cols = c(.data$CATEGORY, .data$name),
names_from = .data$YEAR,
values_from = .data$status,
names_sort = TRUE
) %>%
dplyr::rename(Indicator = .data$name,
"Indicator category" = .data$CATEGORY)
color_dat <- dat %>%
dplyr::select(.data$CATEGORY, .data$name, .data$YEAR, .data$status,
.data$SIGN, .data$color)
#
#   for (i in 1:nrow(color_dat)) {
#     if(is.na(color_dat$SIGN[i])){
#       color_dat$color[i] <- "white"
#     } else if (color_dat$status[i] == "low" & color_dat$SIGN[i] == -1) {
#       color_dat$color[i] <- "cornflowerblue"
#     } else if (color_dat$status[i] == "high" & color_dat$SIGN[i] == 1) {
#       color_dat$color[i] <- "cornflowerblue"
#     } else if (color_dat$status[i] == "high" & color_dat$SIGN[i] == -1) {
#       color_dat$color[i] <- "brown1"
#     } else if (color_dat$status[i] == "low" & color_dat$SIGN[i] == 1) {
#       color_dat$color[i] <- "brown1"
#     }
#   }
color_dat <- color_dat %>%
tidyr::pivot_wider(
id_cols = c(.data$CATEGORY, .data$name),
names_from = .data$YEAR,
values_from = .data$color,
values_fill = "grey80",
names_sort = TRUE
) %>%
dplyr::rename(Indicator = .data$name)
colnames(tbl_dat)[3:ncol(tbl_dat)] <- paste(colnames(tbl_dat)[3:ncol(tbl_dat)], "Status")
flextable::set_flextable_defaults(na_str = "NA")
ft <- flextable::flextable(tbl_dat) %>%
flextable::theme_vanilla() %>%
flextable::set_caption(caption = cap) %>%
flextable::autofit() %>%
flextable::align(align = "center", j = 3:ncol(tbl_dat))
for (j in 3:ncol(tbl_dat)) {
for (i in seq_len(nrow(tbl_dat))) {
ft <- flextable::bg(ft, i = i, j = j, bg = as.character(color_dat[i, j]))
}
}
ft <- ft %>%
flextable::merge_v(j = 1)
return(ft)
}
# AKFIN data doesn't have `SCORE` yet, so doesn't run
devtools::load_all()
rmarkdown::render(here::here("inst/esp-report-card-template.Rmd"),
clean = FALSE,
params = list(esp_data = get_esp_data("Alaska Sablefish"),
fish = "Sablefish",
region = "Alaska"))
