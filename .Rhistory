align = "center",
j = 3:ncol(tbl_dat)
)
for (j in 3:ncol(tbl_dat)) {
for (i in seq_len(nrow(tbl_dat))) {
ft <- flextable::bg(ft,
i = i,
j = j,
bg = as.character(color_dat[i, j])
)
}
}
for (i in 1:nrow(tbl_dat)) {
for (j in 1:ncol(tbl_dat)) {
if (color_dat[i, j] == "brown1") {
ft <- flextable::bold(ft, i = i, j = j)
}
if (color_dat[i, j] == "cornflowerblue") {
ft <- flextable::italic(ft, i = i, j = j)
}
}
}
ft <- ft %>%
flextable::merge_v(j = 1)
return(ft)
}
# `%>%` <- magrittr::`%>%`
esp_traffic_tab_long(dat, year = 2017:2021)
head(dat)
unique(dat$INDICATOR_NAME)
dat %>% dplyr::filter(INDICATOR_NAME == "Annual_Sablefish_Condition_Female_Adult_BSAI_Fishery")
esp_traffic_tab_long <- function(data, year, cap = "Traffic light scoring") {
data$CATEGORY <- factor(data$CATEGORY, c(
"Physical", "Lower Trophic",
"Upper Trophic", "Fishery Performance",
"Economic", "Community"
))
dat <- data %>%
dplyr::filter(
(.data$GATE2_YEAR == "NA" | is.na(.data$GATE2_YEAR)),
(.data$REMOVED_YEAR == "NA" | is.na(.data$REMOVED_YEAR))
) %>%
dplyr::group_by(.data$INDICATOR_NAME) %>%
dplyr::mutate(
name = .data$INDICATOR_NAME %>%
stringr::str_replace_all("_", " "),
this_year = (.data$YEAR %in% year),
avg = mean(.data$DATA_VALUE,
na.rm = TRUE
),
stdev = stats::sd(.data$DATA_VALUE,
na.rm = TRUE
)
) %>%
dplyr::filter(.data$this_year == TRUE) %>%
dplyr::select(
.data$CATEGORY, .data$YEAR, .data$name, .data$DATA_VALUE,
.data$avg, .data$stdev, .data$SIGN, .data$INDICATOR_TYPE,
.data$INTENDED_ESP_NAME, .data$REPORT_CARD_TITLE
) %>%
dplyr::ungroup()
dat <- join_order(dat)
status <- c()
color <- c()
# assign status and color based on SIGN
# color of cell = SIGN
# words in cell = status
for (i in seq_len(nrow(dat))) {
if (is.na(dat$DATA_VALUE[i])) {
status[i] <- "NA"
color[i] <- "gray80"
# colors by sign/value combo
} else if (dat$DATA_VALUE[i] > (dat$avg[i] + dat$stdev[i])) {
status[i] <- "high"
if (is.na(dat$SIGN[i])) {
color[i] <- "white"
} else if (dat$SIGN[i] == 1) {
color[i] <- "cornflowerblue"
} else if (dat$SIGN[i] == -1) {
color[i] <- "brown1"
}
} else if (dat$DATA_VALUE[i] < (dat$avg[i] - dat$stdev[i])) {
status[i] <- "low"
if (is.na(dat$SIGN[i])) {
color[i] <- "white"
} else if (dat$SIGN[i] == -1) {
color[i] <- "cornflowerblue"
} else if (dat$SIGN[i] == 1) {
color[i] <- "brown1"
}
} else {
status[i] <- "neutral"
color[i] <- "white"
}
}
dat$status <- status
dat$color <- color
# make all socioeconomic indicators white
for(i in 1:nrow(dat)){
dat$color[i] <- ifelse(dat$INDICATOR_TYPE[i] == "Socioeconomic",
"white", dat$color[i])
dat$color[i] <- ifelse(is.na(dat$DATA_VALUE[i]),
"grey80", dat$color[i])
}
print(cbind(dat$color,
dat$status))
tbl_dat <- dat %>%
dplyr::select(.data$CATEGORY, .data$name, .data$YEAR, .data$status) %>%
tidyr::pivot_wider(
id_cols = c(.data$CATEGORY, .data$name),
names_from = .data$YEAR,
values_from = .data$status,
names_sort = TRUE
) %>%
dplyr::rename(
Indicator = .data$name,
"Indicator category" = .data$CATEGORY
)
color_dat <- dat %>%
dplyr::select(
.data$CATEGORY, .data$name, .data$YEAR, .data$status,
.data$SIGN, .data$color
)
color_dat <- color_dat %>%
tidyr::pivot_wider(
id_cols = c(.data$CATEGORY, .data$name),
names_from = .data$YEAR,
values_from = .data$color,
values_fill = "grey80",
names_sort = TRUE
) %>%
dplyr::rename(Indicator = .data$name)
print(color_dat, n = 28)
colnames(tbl_dat)[3:ncol(tbl_dat)] <- paste(
colnames(tbl_dat)[3:ncol(tbl_dat)], "Status"
)
flextable::set_flextable_defaults(na_str = "NA")
ft <- flextable::flextable(tbl_dat) %>%
flextable::theme_vanilla() %>%
flextable::set_caption(caption = cap) %>%
flextable::autofit() %>%
flextable::align(
align = "center",
j = 3:ncol(tbl_dat)
)
for (j in 3:ncol(tbl_dat)) {
for (i in seq_len(nrow(tbl_dat))) {
ft <- flextable::bg(ft,
i = i,
j = j,
bg = as.character(color_dat[i, j])
)
}
}
for (i in 1:nrow(tbl_dat)) {
for (j in 1:ncol(tbl_dat)) {
if (color_dat[i, j] == "brown1") {
ft <- flextable::bold(ft, i = i, j = j)
}
if (color_dat[i, j] == "cornflowerblue") {
ft <- flextable::italic(ft, i = i, j = j)
}
}
}
ft <- ft %>%
flextable::merge_v(j = 1)
return(ft)
}
# `%>%` <- magrittr::`%>%`
esp_traffic_tab_long(dat, year = 2017:2021)
esp_traffic_long <- function(data,
name,
out = "ggplot",
paginate = FALSE,
label = TRUE,
status = TRUE,
caption = "",
ncolumn = 1,
silent = FALSE,
min_year = NULL,
...) {
maxyear <- max(data$YEAR)
minyear <- maxyear - 1
if (ncolumn == 1) {
dat <- prep_ind_data(data, label_width = 70)
} else {
dat <- prep_ind_data(data, label_width = 30)
}
dat <- join_order(dat)
plt <- ggplot2::ggplot(
dat,
ggplot2::aes(
x = .data$YEAR,
y = .data$DATA_VALUE,
group = name
)
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$quant10,
group = .data$name
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$quant90,
group = .data$name
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean,
group = .data$name
),
color = "darkgreen",
linetype = "dotted"
) +
ggplot2::geom_point() +
ggplot2::geom_line(data = dat %>%
tidyr::drop_na(.data$DATA_VALUE)) +
ggplot2::ylab("") +
ggplot2::scale_y_continuous(labels = scales::comma) +
ggplot2::theme_bw(base_size = 16) +
ggplot2::theme(strip.text = ggplot2::element_text(size = 10))
if (status) {
# red boxes, bold
plt <- plt + ggplot2::geom_label(
data = dat %>%
dplyr::filter(
.data$YEAR == maxyear,
.data$score < 0
),
ggplot2::aes(
label = .data$label,
y = .data$mean
),
nudge_x = 4,
show.legend = FALSE,
fontface = "bold",
fill = "brown1"
) +
# blue boxes, italic
ggplot2::geom_label(
data = dat %>%
dplyr::filter(
.data$YEAR == maxyear,
.data$score > 0
),
ggplot2::aes(
label = .data$label,
y = .data$mean
),
nudge_x = 4,
show.legend = FALSE,
fontface = "italic",
fill = "cornflowerblue"
) +
# beige boxes, neutral
ggplot2::geom_label(
data = dat %>%
dplyr::filter(
.data$YEAR == maxyear,
.data$score == 0
),
ggplot2::aes(
label = .data$label,
y = .data$mean
),
nudge_x = 4,
show.legend = FALSE,
fill = "beige"
)
}
if(status){
if (is.null(min_year)) {
plt <- plt +
ggplot2::xlim(c(min(dat$YEAR), max(dat$YEAR) + 6))
} else {
plt <- plt +
ggplot2::xlim(c(min_year, max(dat$YEAR) + 6))
}
}
if(!status){
if (is.null(min_year)) {
plt <- plt +
ggplot2::xlim(c(min(dat$YEAR), max(dat$YEAR) + 0.5))
} else {
plt <- plt +
ggplot2::xlim(c(min_year, max(dat$YEAR) + 0.5))
}
}
finish_fig <- function() {
if (label) {
plt <- plt %>%
AKesp::label_facets(open = "", close = "")
}
if (out == "save") {
ggplot2::ggsave(plt, filename = paste0(name, "_page", i, ".png"), ...)
} else if (out == "ggplot") {
print(plt)
cat("\n\n")
if (silent == FALSE) {
cat("##### Figure \\@ref(fig:traffic).", caption, "{-}")
}
cat("\n\n")
} else if (out == "one_pager") {
return(plt)
}
else {
stop("Please specify output format")
}
}
if (paginate == TRUE) {
plt2 <- plt +
ggforce::facet_wrap_paginate(~name,
ncol = ncolumn,
nrow = 5,
scales = "free_y"
)
n <- ggforce::n_pages(plt2)
for (i in 1:n) {
plt <- plt +
ggforce::facet_wrap_paginate(~name,
ncol = ncolumn,
nrow = 5,
scales = "free_y",
page = i
)
finish_fig()
}
} else {
plt <- plt +
ggplot2::facet_wrap(~name,
ncol = ncolumn,
scales = "free_y"
)
finish_fig()
}
}
esp_traffic_long(dat, out = "ggplot", paginate = TRUE)
esp_traffic_long <- function(data,
name,
out = "ggplot",
paginate = FALSE,
label = TRUE,
status = TRUE,
caption = "",
ncolumn = 1,
silent = FALSE,
min_year = NULL,
...) {
maxyear <- max(data$YEAR)
minyear <- maxyear - 1
if (ncolumn == 1) {
dat <- prep_ind_data(data, label_width = 70)
} else {
dat <- prep_ind_data(data, label_width = 30)
}
dat <- join_order(dat)
plt <- ggplot2::ggplot(
dat,
ggplot2::aes(
x = .data$YEAR,
y = .data$DATA_VALUE,
group = name
)
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean + .data$sd,
group = .data$name
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean - .data$sd,
group = .data$name
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean,
group = .data$name
),
color = "darkgreen",
linetype = "dotted"
) +
ggplot2::geom_point() +
ggplot2::geom_line(data = dat %>%
tidyr::drop_na(.data$DATA_VALUE)) +
ggplot2::ylab("") +
ggplot2::scale_y_continuous(labels = scales::comma) +
ggplot2::theme_bw(base_size = 16) +
ggplot2::theme(strip.text = ggplot2::element_text(size = 10))
if (status) {
# red boxes, bold
plt <- plt + ggplot2::geom_label(
data = dat %>%
dplyr::filter(
.data$YEAR == maxyear,
.data$score < 0
),
ggplot2::aes(
label = .data$label,
y = .data$mean
),
nudge_x = 4,
show.legend = FALSE,
fontface = "bold",
fill = "brown1"
) +
# blue boxes, italic
ggplot2::geom_label(
data = dat %>%
dplyr::filter(
.data$YEAR == maxyear,
.data$score > 0
),
ggplot2::aes(
label = .data$label,
y = .data$mean
),
nudge_x = 4,
show.legend = FALSE,
fontface = "italic",
fill = "cornflowerblue"
) +
# beige boxes, neutral
ggplot2::geom_label(
data = dat %>%
dplyr::filter(
.data$YEAR == maxyear,
.data$score == 0
),
ggplot2::aes(
label = .data$label,
y = .data$mean
),
nudge_x = 4,
show.legend = FALSE,
fill = "beige"
)
}
if(status){
if (is.null(min_year)) {
plt <- plt +
ggplot2::xlim(c(min(dat$YEAR), max(dat$YEAR) + 6))
} else {
plt <- plt +
ggplot2::xlim(c(min_year, max(dat$YEAR) + 6))
}
}
if(!status){
if (is.null(min_year)) {
plt <- plt +
ggplot2::xlim(c(min(dat$YEAR), max(dat$YEAR) + 0.5))
} else {
plt <- plt +
ggplot2::xlim(c(min_year, max(dat$YEAR) + 0.5))
}
}
finish_fig <- function() {
if (label) {
plt <- plt %>%
AKesp::label_facets(open = "", close = "")
}
if (out == "save") {
ggplot2::ggsave(plt, filename = paste0(name, "_page", i, ".png"), ...)
} else if (out == "ggplot") {
print(plt)
cat("\n\n")
if (silent == FALSE) {
cat("##### Figure \\@ref(fig:traffic).", caption, "{-}")
}
cat("\n\n")
} else if (out == "one_pager") {
return(plt)
}
else {
stop("Please specify output format")
}
}
if (paginate == TRUE) {
plt2 <- plt +
ggforce::facet_wrap_paginate(~name,
ncol = ncolumn,
nrow = 5,
scales = "free_y"
)
n <- ggforce::n_pages(plt2)
for (i in 1:n) {
plt <- plt +
ggforce::facet_wrap_paginate(~name,
ncol = ncolumn,
nrow = 5,
scales = "free_y",
page = i
)
finish_fig()
}
} else {
plt <- plt +
ggplot2::facet_wrap(~name,
ncol = ncolumn,
scales = "free_y"
)
finish_fig()
}
}
esp_traffic_long(dat, out = "ggplot", paginate = TRUE)
