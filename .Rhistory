}
}
if (paginate == TRUE) {
plt2 <- plt +
ggforce::facet_wrap_paginate(~name,
ncol = ncolumn,
nrow = 5,
scales = "free_y"
)
n <- ggforce::n_pages(plt2)
for (i in 1:n) {
plt <- plt +
ggforce::facet_wrap_paginate(~name,
ncol = ncolumn,
nrow = 5,
scales = "free_y",
page = i
)
finish_fig()
}
} else {
plt <- plt +
ggplot2::facet_wrap(~name,
ncol = ncolumn,
scales = "free_y"
)
finish_fig()
}
}
esp_traffic_long(dat, out = "ggplot", paginate = TRUE)
esp_traffic_long <- function(data,
name,
out = "ggplot",
paginate = FALSE,
label = TRUE,
status = TRUE,
caption = "",
ncolumn = 1,
silent = FALSE,
min_year = NULL,
...) {
maxyear <- max(data$YEAR)
minyear <- maxyear - 1
if (ncolumn == 1) {
dat <- prep_ind_data(data, label_width = 70)
} else {
dat <- prep_ind_data(data, label_width = 30)
}
dat <- join_order(dat)
plt <- ggplot2::ggplot(
dat,
ggplot2::aes(
x = .data$YEAR,
y = .data$DATA_VALUE,
group = name
)
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean + .data$sd,
group = .data$name
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean - .data$sd,
group = .data$name
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean,
group = .data$name
),
color = "darkgreen",
linetype = "dotted"
) +
ggplot2::geom_point() +
ggplot2::geom_line(data = dat %>%
tidyr::drop_na(.data$DATA_VALUE)) +
ggplot2::ylab("") +
ggplot2::scale_y_continuous(labels = scales::comma) +
ggplot2::theme_bw(base_size = 16) +
ggplot2::theme(strip.text = ggplot2::element_text(size = 10))
if (status) {
# red boxes, bold
plt <- plt + ggplot2::geom_label(
data = dat %>%
dplyr::filter(
.data$YEAR == maxyear,
.data$score < 0
),
ggplot2::aes(
label = .data$label,
y = .data$mean
),
nudge_x = 4,
show.legend = FALSE,
fontface = "bold",
fill = "brown1"
) +
# blue boxes, italic
ggplot2::geom_label(
data = dat %>%
dplyr::filter(
.data$YEAR == maxyear,
.data$score > 0
),
ggplot2::aes(
label = .data$label,
y = .data$mean
),
nudge_x = 4,
show.legend = FALSE,
fontface = "italic",
fill = "cornflowerblue"
) +
# beige boxes, neutral
ggplot2::geom_label(
data = dat %>%
dplyr::filter(
.data$YEAR == maxyear,
.data$score == 0
),
ggplot2::aes(
label = .data$label,
y = .data$mean
),
nudge_x = 4,
show.legend = FALSE,
fill = "beige"
)
}
if(status){
if (is.null(min_year)) {
plt <- plt +
ggplot2::xlim(c(min(dat$YEAR), max(dat$YEAR) + 6))
} else {
plt <- plt +
ggplot2::xlim(c(min_year, max(dat$YEAR) + 6))
}
}
if(!status){
if (is.null(min_year)) {
plt <- plt +
ggplot2::xlim(c(min(dat$YEAR), max(dat$YEAR) + 0.5))
} else {
plt <- plt +
ggplot2::xlim(c(min_year, max(dat$YEAR) + 0.5))
}
}
finish_fig <- function() {
if (label) {
plt <- plt %>%
AKesp::label_facets(open = "", close = "")
}
if (out == "save") {
ggplot2::ggsave(plt, filename = paste0(name, "_page", i, ".png"), ...)
} else if (out == "ggplot") {
print(plt)
cat("\n\n")
if (silent == FALSE) {
cat("##### Figure \\@ref(fig:traffic).", caption, "{-}")
}
cat("\n\n")
} else if (out == "one_pager") {
return(plt)
}
else {
stop("Please specify output format")
}
}
if (paginate == TRUE) {
plt2 <- plt +
ggforce::facet_wrap_paginate(~name,
ncol = ncolumn,
nrow = 5,
scales = "free_y"
)
n <- ggforce::n_pages(plt2)
for (i in 1:n) {
plt <- plt +
ggforce::facet_wrap_paginate(~name,
ncol = ncolumn,
nrow = 5,
scales = "free_y",
page = i
)
finish_fig()
}
} else {
plt <- plt +
ggplot2::facet_wrap(~name,
ncol = ncolumn,
scales = "free_y"
)
finish_fig()
}
}
esp_traffic_long(dat, out = "ggplot", paginate = TRUE)
stat_dat$shape[i] <- ifelse(stat_dat$label_num[i] == -1, 25,
ifelse(stat_dat$label_num[i] == -1, 24, 21))
devtools::load_all()
devtools::load_all()
`%>%` <- magrittr::`%>%`
# query data
dat <- AKesp::get_esp_data("Alaska Sablefish")
esp_traffic_long(dat, out = "ggplot", paginate = TRUE)
devtools::load_all() ; esp_traffic_long(dat, out = "ggplot", paginate = TRUE)
devtools::load_all() ; esp_traffic_long(dat, out = "ggplot", paginate = TRUE)
devtools::load_all() ; esp_traffic_long(dat, out = "ggplot", paginate = TRUE)
devtools::load_all() ; esp_traffic_long(dat, out = "ggplot", paginate = TRUE)
? ggplot2::scale_shape_discrete
?scale_fill_manuak
?scale_fill_manual
?scale_shape_manual
devtools::load_all() ; esp_traffic_long(dat, out = "ggplot", paginate = TRUE)
devtools::load_all() ; esp_traffic_long(dat, out = "ggplot", paginate = TRUE)
devtools::load_all() ; esp_traffic_long(dat, out = "ggplot", paginate = TRUE)
?ggplot2
?ggplot2::ggplot
devtools::load_all() ; esp_traffic_long(dat, out = "ggplot", paginate = TRUE)
?geom_point
?ggnewscale
devtools::load_all() ; esp_traffic_long(dat, out = "ggplot", paginate = TRUE)
devtools::load_all() ; esp_traffic_long(dat, out = "ggplot", paginate = TRUE)
devtools::load_all() ; esp_traffic_long(dat, out = "ggplot", paginate = TRUE)
devtools::load_all() ; esp_traffic_long(dat, out = "ggplot", paginate = TRUE)
devtools::load_all() ; esp_traffic_long(dat, out = "ggplot", paginate = TRUE)
devtools::load_all() ; esp_traffic_long(dat, out = "ggplot", paginate = TRUE)
devtools::load_all() ; esp_traffic_long(dat, out = "ggplot", paginate = TRUE)
devtools::load_all() ; esp_traffic_long(dat, out = "ggplot", paginate = TRUE)
devtools::load_all() ; esp_traffic_long(dat, out = "ggplot", paginate = TRUE)
devtools::load_all() ; esp_traffic_long(dat, out = "ggplot", paginate = TRUE)
one_pager <- function(data,
overall_data,
years = 2017:2021,
head_text = "some text",
foot_text = "more text",
bayes_path = here::here("bayes.png"),
header_path = here::here("header.png")
) {
# indicator figure
fig <- AKesp::esp_traffic_long(
data = data,
paginate = FALSE,
out = "one_pager",
silent = TRUE,
ncolumn = 2,
label = FALSE,
status = FALSE
)
# score figure
score_fig <- AKesp::esp_overall_score(data = overall_data,
species = "",
region = "",
out = "one_pager") +
ggplot2::ggtitle("Overall score")
# make a table
tab <- AKesp::esp_traffic_tab_long(data,
year = years,
cap = "") %>%
flextable::fit_to_width(max_width = 8)
ggtab <- ggplot2::ggplot() +
ggplot2::theme_void() +
ggplot2::annotation_custom(grid::rasterGrob(flextable::as_raster(tab)),
xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf)
# bayes
bay <- png::readPNG(bayes_path)
bayes <- ggplot2::ggplot() +
ggplot2::theme_void() +
ggplot2::theme(aspect.ratio = 1) +
ggpubr::background_image(bay)
# right hand figures - score and bayes
right_figs <- ggpubr::ggarrange(
score_fig +
ggplot2::theme_bw(base_size = 10) +
ggplot2::theme(legend.position = "bottom",
legend.title = ggplot2::element_blank(),
legend.margin = ggplot2::margin(),
legend.box.margin = ggplot2::margin(),
legend.box.spacing = grid::unit(1, "points"),
legend.text = ggplot2::element_text(margin = ggplot2::margin()),
plot.title =
ggplot2::element_text(hjust = 0.5)),
bayes +
ggplot2::ggtitle("Importance") +
ggplot2::theme(plot.title =
ggplot2::element_text(hjust = 0.5)),
nrow = 2)
# all figs
figs <- ggpubr::ggarrange(fig +
ggplot2::ggtitle("Indicators") +
ggplot2::theme_bw(base_size = 10) +
ggplot2::theme(plot.title =
ggplot2::element_text(hjust = 0.5)),
right_figs,
ncol = 2,
widths = c(2, 1))
# header
head <- png::readPNG(header_path)
header <- ggplot2::ggplot() +
ggplot2::theme_void() +
ggplot2::theme(aspect.ratio = 1/4) +
ggpubr::background_image(head)
# text header
h_txt <- ggplot2::ggplot() +
ggplot2::theme_void() +
ggplot2::annotate("text", x = 1, y = 1, label = head_text)
# text summary
txt <- ggplot2::ggplot() +
ggplot2::theme_void() +
ggplot2::annotate("text", x = 1, y = 1, label = foot_text)
# put it all together
summary_pg <- ggpubr::ggarrange(header,
h_txt,
figs,
ggtab +
ggplot2::ggtitle("Traffic light table") +
ggplot2::theme(plot.title =
ggplot2::element_text(hjust = 0.5)),
txt,
nrow = 5,
heights = c(2, 0.5, 5.5, 2.5, 0.5))
ggplot2::ggsave("test.pdf",
width = 8.5,
height = 11)
}
one_pager(data = dat2, overall_data = dat)
dat2 <- dat %>%
dplyr::filter(CATEGORY == "Upper Trophic")
one_pager(data = dat2, overall_data = dat)
roxygen2::roxygenise()
pkgdown::build_site()
render_rpt_card <- function(data,
fish,
region,
stock_image,
con_model_path,
bayes_path,
...) {
rmarkdown::render(system.file("esp-report-card-template.Rmd",
package = "AKesp"
),
...,
params = list(
esp_data = data,
fish = fish,
region = region,
stock_image = stock_image,
con_model_path = con_model_path,
bayes_path = bayes_path
)
)
}
# query data
dat <- AKesp::get_esp_data("Alaska Sablefish")
render_rpt_card(dat,
output_file = here::here("test.docx"),
fish = "Sablefish",
region = "Alaska",
stock_image = here::here("inst/images/noaa.jpg"),
con_model_path = here::here("inst/images/noaa.jpg"),
bayes_path = here::here("inst/images/noaa.jpg"))
render_rpt_card(dat,
output_file = here::here("test.docx"),
fish = "Sablefish",
region = "Alaska",
stock_image = here::here("inst/images/noaa.jpg"),
con_model_path = here::here("inst/images/noaa.jpg"),
bayes_path = here::here("inst/images/noaa.jpg"))
render_rpt_card <- function(data,
# fish,
# region,
# stock_image,
# con_model_path,
# bayes_path,
...) {
rmarkdown::render(system.file("esp-report-card-template.Rmd",
package = "AKesp"
),
...
)
}
render_rpt_card(dat,
output_file = here::here("test.docx"),
params = list(
fish = "Sablefish",
region = "Alaska",
stock_image = here::here("inst/images/noaa.jpg"),
con_model_path = here::here("inst/images/noaa.jpg"),
bayes_path = here::here("inst/images/noaa.jpg")))
render_rpt_card(output_file = here::here("test.docx"),
params = list(
esp_data = dat,
fish = "Sablefish",
region = "Alaska",
stock_image = here::here("inst/images/noaa.jpg"),
con_model_path = here::here("inst/images/noaa.jpg"),
bayes_path = here::here("inst/images/noaa.jpg")))
yaml::read_yaml(system.file("esp-report-card-template.Rmd",
package = "AKesp"
))
ymlthis::get_rmd_defaults(system.file("esp-report-card-template.Rmd",
package = "AKesp"
))
rmarkdown::metadata(system.file("esp-report-card-template.Rmd",
package = "AKesp"
))
rmarkdown::rmd_metadata(system.file("esp-report-card-template.Rmd",
package = "AKesp"
))
roxygen2::roxygenise()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
styler::style_dir("R")
devtools::build_manual()
?devtools::build_manual()
install.packages("tinytex")
install.packages("tinytex")
devtools::build_manual()
install.packages("devtools")
install.packages("devtools")
devtools::build_manual()
devtools::build_manual
pkg = "."
path = NULL
pkg <- as.package(pkg)
?as.package
pkg <- devtools::as.package(pkg)
pkg
path <- path %||% path_dir(pkg$path)
?`%||%`
path <- path rlang::`%||%` path_dir(pkg$path)
`%||%` <- rlang::`%||%`
path <- path %||% path_dir(pkg$path)
?path_dir
path <- path %||% fs::path_dir(pkg$path)
name <- paste0(pkg$package, "_", pkg$version, ".pdf",
collapse = " ")
tryCatch(msg <- callr::rcmd("Rd2pdf", cmdargs = c("--force",
paste0("--output=", path, "/", name), pkg$path),
fail_on_status = TRUE, stderr = "2>&1", spinner = FALSE),
error = function(e) {
cat(e$stdout)
stop("Failed to build manual", call. = FALSE)
})
cat(msg$stdout)
?callr::rcmd
tryCatch(msg <- callr::rcmd("Rd2pdf",
cmdargs = c("--force",
paste0("--output=", path, "/", name),
pkg$path),
fail_on_status = FALSE,
stderr = "2>&1",
spinner = FALSE),
error = function(e) {
cat(e$stdout)
stop("Failed to build manual", call. = FALSE)
})
cat(msg$stdout)
invisible(msg)
?install.packages
?devtools::load_all
?remotes::install_github
?devtools::install_github
?build_manual
?bookdown::render_book
bookdown::render_book("book")
bookdown::render_book(input = "book")
bookdown::render_book(input = "book/index.Rmd")
bookdown::render_book(input = here::here("book/index.Rmd"))
ls()
list.files(here::here("book"))
here::here("book/index.Rmd")
bookdown::render_book(input = here::here("book/index.Rmd"), config_file = here::here("book/_bookdown.yaml"))
bookdown::render_book(input = here::here("book/index.Rmd"))
bookdown::render_book(input = list.files("book", pattern = ".Rmd", full.names = TRUE)
)
setwd("book")
bookdown::render_book(input = list.files("book", pattern = ".Rmd", full.names = TRUE))
?(
)
?knitr::opts_chunk$set
?knitr::opts_chunk
bookdown::render_book(input = list.files("book", pattern = ".Rmd", full.names = TRUE))
bookdown::render_book(input = list.files("book", pattern = ".Rmd", full.names = TRUE))
remotes::install_github("atyrell/AKesp")
remotes::install_github("atyrell3/AKesp")
bookdown::render_book(input = list.files("book", pattern = ".Rmd", full.names = TRUE))
bookdown::render_book(input = list.files("book", pattern = ".Rmd", full.names = TRUE))
# query data
dat <- AKesp::get_esp_data("Alaska Sablefish")
head(dat)
NEesp::find_files("!!")
?NEesp::find_files
NEesp::find_files("!!", path = "..")
# query data
dat <- AKesp::get_esp_data("Alaska Sablefish")
head(dat)
View(dat)
write.csv(dat, "example_alask_data.csv")
?httr::content
?shiny::passwordInput
# query data
dat <- AKesp::get_esp_data("Alaska Sablefish")
head(dat)
View(dat)
unique(dat$PRELIMINARY)
