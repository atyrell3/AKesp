} else if (out == "ggplot") {
print(plt)
cat("\n\n")
if (silent == FALSE) {
cat("##### Figure \\@ref(fig:", chunk_label, "). ", caption, " {-}", sep = "")
}
cat("\n\n")
} else if (out == "one_pager") {
return(plt)
}
else {
stop("Please specify output format")
}
}
if (paginate == TRUE) {
plt2 <- plt +
ggforce::facet_wrap_paginate(
~name,
# ggforce::facet_grid_paginate(
#   rows = ggplot2::vars(name),
#   cols = ggplot2::vars(UNITS),
ncol = ncolumn,
nrow = 5,
scales = "free_y"
)
n <- ggforce::n_pages(plt2)
for (i in 1:n) {
plt <- plt +
ggforce::facet_wrap_paginate(~name,
ncol = ncolumn,
nrow = 5,
scales = "free_y",
page = i#,
#labeller = ggplot2::labeller(name = ylabels)
)
finish_fig()
}
} else {
plt <- plt +
ggplot2::facet_wrap(~name,
ncol = ncolumn,
scales = "free_y"#,
# labeller = ggplot2::labeller(name = ylabels)
)
finish_fig()
}
}
esp_traffic(dat)
head(dat)
check_data <- function(data, fill = TRUE) {
expected_colnames <- c("YEAR", "INDICATOR_NAME", "DATA_VALUE",
"DATA_SOURCE_NAME", "DATABASE_NAME", "PRODUCT",
"PRODUCT_DESCRIPTION", "INDICATOR_TYPE", "CATEGORY",
"CONTACT", "FREQUENCY", "REGION", "TIME_START",
"TIME_END", "AKFIN", "ESR", "REFERENCE", "PRELIMINARY",
"REPORT_CARD_TITLE", "INTENDED_ESP_NAME",
"SUBMISSION_YEAR", "GATE1_YEAR", "GATE2_YEAR",
"REMOVED_YEAR", "SIGN", "WEIGHT", "STATUS_TRENDS",
"INFLUENTIAL_FACTORS", "UNITS", "INDICATOR_ORDER")
data_colnames <- colnames(data)
match <- length(expected_colnames) == length(data_colnames)
if(match){
message("all expected columns present in data")
} else if(fill) {
missing_cols <- expected_colnames[which(! expected_colnames %in% data_colnames)]
for(i in missing_cols) {
data[,i] <- NA
message("missing columns -- filled with NAs")
}
} else {
message("missing columns -- not filling!")
}
return(data)
}
dat <- check_data(dat)
esp_traffic(dat)
prep_ind_data(dat)
prep_ind_data <- function(data, recent = TRUE, label_width = 50) {
maxyear <- max(data$YEAR)
minyear <- maxyear - 1
dat <- data %>%
dplyr::filter(
(.data$GATE2_YEAR == "NA" | is.na(.data$GATE2_YEAR)),
(.data$REMOVED_YEAR == "NA" | is.na(.data$REMOVED_YEAR))
) %>%
dplyr::select(
.data$INDICATOR_NAME, .data$CATEGORY, .data$INDICATOR_TYPE,
.data$YEAR, .data$DATA_VALUE, .data$SIGN, .data$WEIGHT,
.data$INTENDED_ESP_NAME, .data$REPORT_CARD_TITLE, .data$UNITS,
.data$INDICATOR_ORDER
) %>%
dplyr::group_by(.data$INDICATOR_NAME) %>%
dplyr::mutate(
name = .data$INDICATOR_NAME %>%
stringr::str_replace_all("_", " ") %>%
stringr::str_wrap(width = label_width),
quant10 = stats::quantile(.data$DATA_VALUE,
probs = 0.1,
na.rm = TRUE
),
mean = mean(.data$DATA_VALUE,
na.rm = TRUE
),
sd = stats::sd(.data$DATA_VALUE,
na.rm = TRUE
),
quant90 = stats::quantile(.data$DATA_VALUE,
probs = 0.9,
na.rm = TRUE
),
recent = (.data$YEAR == maxyear | .data$YEAR == minyear),
label = ifelse(
# if(recent){.data$YEAR == maxyear} else {
is.na(.data$DATA_VALUE) == FALSE
# }
,
ifelse(.data$DATA_VALUE < (.data$mean + .data$sd),
ifelse(.data$DATA_VALUE > (.data$mean - .data$sd),
"neutral", "low"
),
"high"
),
NA
),
label_num = ifelse(.data$label == "low", -1,
ifelse(.data$label == "high", 1, 0)
),
score = as.character(.data$label_num * .data$SIGN * .data$WEIGHT)
) %>%
dplyr::ungroup()
return(dat)
}
esp_traffic(dat)
esp_traffic(dat, paginate = TRUE)
esp_traffic <- function(data,
name,
out = "ggplot",
paginate = FALSE,
label = TRUE,
status = TRUE,
caption = "",
ncolumn = 1,
silent = FALSE,
min_year = NULL,
chunk_label = "traffic",
f_units = FALSE,
y_units = TRUE,
...) {
maxyear <- max(data$YEAR)
minyear <- maxyear - 1
if (ncolumn == 1) {
dat <- prep_ind_data(data, label_width = 50)
} else {
dat <- prep_ind_data(data, label_width = 25)
}
dat <- dat %>%
dplyr::arrange(INDICATOR_ORDER)
dat$name <- factor(dat$name, levels = unique(dat$name))
# add units on facet ----
if(f_units){
dat <- dat %>%
dplyr::mutate(name = paste0(.data$name, "\n", .data$UNITS))
}
plt <- ggplot2::ggplot(
dat,
ggplot2::aes(
x = .data$YEAR,
y = .data$DATA_VALUE,
group = name
)
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean + .data$sd,
group = .data$name
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean - .data$sd,
group = .data$name
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean,
group = .data$name
),
color = "darkgreen",
linetype = "dotted"
) +
ggplot2::geom_point() +
ggplot2::geom_line(data = dat %>%
tidyr::drop_na(.data$DATA_VALUE)) +
ggplot2::ylab("") +
ggplot2::scale_y_continuous(labels = scales::comma) +
ggplot2::theme_bw(base_size = 16) +
ggplot2::theme(strip.text = ggplot2::element_text(size = 10))
# try to add units on y axis ----
if(y_units){
key <- dat %>%
dplyr::select(.data$name, .data$UNITS, .data$DATA_VALUE, .data$YEAR) %>%
dplyr::mutate(min_year = min(.data$YEAR, na.rm = TRUE)) %>%
dplyr::group_by(.data$name, .data$UNITS, .data$min_year) %>%
dplyr::summarise(mean = mean(.data$DATA_VALUE, na.rm = TRUE))
plt <- plt +
ggplot2::geom_text(data = key,
inherit.aes = FALSE,
ggplot2::aes(x = min_year,
y = mean,
label = paste(stringr::str_wrap(.data$UNITS, 10),
"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")),
angle = 90,
lineheight = 0.75) +
ggplot2::theme(plot.margin = ggplot2::unit(c(1, 1, 1, 6), "lines")) +
ggplot2::coord_cartesian(clip = "off") +
ggplot2::scale_y_continuous(labels = scales::label_scientific(),
breaks = scales::breaks_pretty(n = 3))
# ylabels <- key$UNITS
# names(ylabels) <- key$name
}
# status ----
if (status) {
stat_dat <- dat %>%
dplyr::filter(
.data$YEAR == maxyear
)
# status shapes/colors
plt <- plt + ggplot2::geom_point(
data = stat_dat,
ggplot2::aes(
x = .data$YEAR + 1,
y = .data$mean,
shape = as.factor(.data$label_num),
fill = as.factor(.data$score)
),
show.legend = FALSE,
cex = 4
) +
ggplot2::scale_shape_manual(values = c("-1" = 25, "0" = 21, "1" = 24)) +
ggplot2::scale_fill_manual(values = c(
"-1" = "brown1",
"0" = "beige",
"1" = "cornflowerblue"
))
# also add + - for 508
plt <- plt +
ggnewscale::new_scale(new_aes = "shape") +
ggplot2::geom_point(
data = stat_dat,
ggplot2::aes(
x = .data$YEAR + 1.05,
y = .data$mean,
shape = as.factor(.data$score)
),
show.legend = FALSE,
cex = 4,
inherit.aes = FALSE
) +
ggplot2::scale_shape_manual(values = c("-1" = "-", "0" = NA, "1" = "+"))
}
if (status) {
if (is.null(min_year)) {
plt <- plt +
ggplot2::xlim(c(min(dat$YEAR), max(dat$YEAR) + 1.5))
} else {
plt <- plt +
ggplot2::xlim(c(min_year, max(dat$YEAR) + 1.5))
}
}
if (!status) {
if (is.null(min_year)) {
plt <- plt +
ggplot2::xlim(c(min(dat$YEAR), max(dat$YEAR) + 0.5))
} else {
plt <- plt +
ggplot2::xlim(c(min_year, max(dat$YEAR) + 0.5))
}
}
finish_fig <- function() {
if (label) {
plt <- plt %>%
AKesp::label_facets(open = "", close = "")
}
if (out == "save") {
ggplot2::ggsave(plt, filename = paste0(name, "_page", i, ".png"), ...)
} else if (out == "ggplot") {
print(plt)
cat("\n\n")
if (silent == FALSE) {
cat("##### Figure \\@ref(fig:", chunk_label, "). ", caption, " {-}", sep = "")
}
cat("\n\n")
} else if (out == "one_pager") {
return(plt)
}
else {
stop("Please specify output format")
}
}
if (paginate == TRUE) {
plt2 <- plt +
ggforce::facet_wrap_paginate(
~name,
# ggforce::facet_grid_paginate(
#   rows = ggplot2::vars(name),
#   cols = ggplot2::vars(UNITS),
ncol = ncolumn,
nrow = 5,
scales = "free_y"
)
n <- ggforce::n_pages(plt2)
for (i in 1:n) {
plt <- plt +
ggforce::facet_wrap_paginate(~name,
ncol = ncolumn,
nrow = 5,
scales = "free_y",
page = i#,
#labeller = ggplot2::labeller(name = ylabels)
)
finish_fig()
}
} else {
plt <- plt +
ggplot2::facet_wrap(~name,
ncol = ncolumn,
scales = "free_y"#,
# labeller = ggplot2::labeller(name = ylabels)
)
finish_fig()
}
}
esp_traffic(dat, paginate = TRUE)
esp_traffic_tab <- function(data, year, cap = "Traffic light scoring") {
data$CATEGORY <- factor(data$CATEGORY, c(
"Physical", "Lower Trophic",
"Upper Trophic", "Fishery Performance",
"Economic", "Community"
))
dat <- data %>%
dplyr::filter(
(.data$GATE2_YEAR == "NA" | is.na(.data$GATE2_YEAR)),
(.data$REMOVED_YEAR == "NA" | is.na(.data$REMOVED_YEAR))
) %>%
dplyr::group_by(.data$INDICATOR_NAME) %>%
dplyr::mutate(
name = .data$INDICATOR_NAME %>%
stringr::str_replace_all("_", " "),
this_year = (.data$YEAR %in% year),
avg = mean(.data$DATA_VALUE,
na.rm = TRUE
),
stdev = stats::sd(.data$DATA_VALUE,
na.rm = TRUE
)
)  %>%
dplyr::ungroup() %>%
dplyr::filter(.data$this_year == TRUE) %>%
dplyr::select(
.data$CATEGORY, .data$YEAR, .data$name, .data$DATA_VALUE,
.data$avg, .data$stdev, .data$SIGN, .data$INDICATOR_TYPE,
.data$INTENDED_ESP_NAME, .data$REPORT_CARD_TITLE,
.data$INDICATOR_ORDER
)
dat <- dat %>%
dplyr::arrange(INDICATOR_ORDER)
dat$name <- factor(dat$name, levels = unique(dat$name))
status <- c()
color <- c()
# assign status and color based on SIGN
# color of cell = SIGN
# words in cell = status
for (i in seq_len(nrow(dat))) {
if (is.na(dat$DATA_VALUE[i])) {
status[i] <- "NA"
color[i] <- "gray80"
# colors by sign/value combo
} else if (dat$DATA_VALUE[i] > (dat$avg[i] + dat$stdev[i])) {
status[i] <- "high"
if (is.na(dat$SIGN[i])) {
color[i] <- "white"
} else if (dat$SIGN[i] == 1) {
color[i] <- "cornflowerblue"
} else if (dat$SIGN[i] == -1) {
color[i] <- "brown1"
}
} else if (dat$DATA_VALUE[i] < (dat$avg[i] - dat$stdev[i])) {
status[i] <- "low"
if (is.na(dat$SIGN[i])) {
color[i] <- "white"
} else if (dat$SIGN[i] == -1) {
color[i] <- "cornflowerblue"
} else if (dat$SIGN[i] == 1) {
color[i] <- "brown1"
}
} else {
status[i] <- "neutral"
color[i] <- "white"
}
}
dat$status <- status
dat$color <- color
# make all socioeconomic indicators white
for (i in 1:nrow(dat)) {
dat$color[i] <- ifelse(dat$INDICATOR_TYPE[i] == "Socioeconomic",
"white", dat$color[i]
)
dat$color[i] <- ifelse(is.na(dat$DATA_VALUE[i]),
"grey80", dat$color[i]
)
}
tbl_dat <- dat %>%
dplyr::select(.data$CATEGORY, .data$name, .data$YEAR, .data$status) %>%
tidyr::pivot_wider(
id_cols = c(.data$CATEGORY, .data$name),
names_from = .data$YEAR,
values_from = .data$status,
names_sort = TRUE
) %>%
dplyr::rename(
Indicator = .data$name,
"Indicator category" = .data$CATEGORY
)
color_dat <- dat %>%
dplyr::select(
.data$CATEGORY, .data$name, .data$YEAR, .data$status,
.data$SIGN, .data$color
)
color_dat <- color_dat %>%
tidyr::pivot_wider(
id_cols = c(.data$CATEGORY, .data$name),
names_from = .data$YEAR,
values_from = .data$color,
values_fill = "grey80",
names_sort = TRUE
) %>%
dplyr::rename(Indicator = .data$name)
colnames(tbl_dat)[3:ncol(tbl_dat)] <- paste(
colnames(tbl_dat)[3:ncol(tbl_dat)], "Status"
)
flextable::set_flextable_defaults(na_str = "NA")
ft <- flextable::flextable(tbl_dat) %>%
flextable::theme_vanilla() %>%
flextable::set_caption(caption = cap) %>%
flextable::autofit() %>%
flextable::align(
align = "center",
j = 3:ncol(tbl_dat)
)
for (j in 3:ncol(tbl_dat)) {
for (i in seq_len(nrow(tbl_dat))) {
ft <- flextable::bg(ft,
i = i,
j = j,
bg = as.character(color_dat[i, j])
)
}
}
for (i in 1:nrow(tbl_dat)) {
for (j in 1:ncol(tbl_dat)) {
if (color_dat[i, j] == "brown1") {
ft <- flextable::bold(ft, i = i, j = j)
}
if (color_dat[i, j] == "cornflowerblue") {
ft <- flextable::italic(ft, i = i, j = j)
}
}
}
ft <- ft %>%
flextable::merge_v(j = 1)
return(ft)
}
esp_traffic_tab(dat, year = 2018:2022)
roxygen2::roxygenise()
install.packages("roxygen2")
install.packages("roxygen2")
roxygen2::roxygenise()
roxygen2::roxygenise()
NEesp::find_files("join_order")
AKesp::get_esp_data("Alaska Sablefish")
devtools::load_all()
get_esp_data("Alaska Sablefish")
get_esp_data("GOA Pollock")
get_esp_data("GOA Pollock") -> dat
esp_traffic(dat)
esp_traffic(dat, paginate = TRUE)
remotes::install_github("kshotwell/AKesp")
remove.packages("AKesp")
remotes::install_github("kshotwell/AKesp")
remotes::install_github("kshotwell/AKesp")
dat <- AKesp::get_esp_data("GOA Pollock")
AKesp::esp_traffic(dat, paginate = TRUE)
list.files(here::here(), dependencies = TRUE)
list.files(here::here(), recursive = TRUE)
sink("files.txt")
list.files(here::here(), recursive = TRUE)
sink()
fxn_nodes <- read.csv(here::here("data-raw/nodes.csv"))
fxn_edges <- read.csv(here::here("data-raw/edges.csv"))
visNetwork::visNetwork(nodes = fxn_nodes,
edges = fxn_edges)
NEesp::find_files("nodes.csv")
NEesp::find_files("nodes")
NEesp::find_files("create-report-card")
NEesp::find_files("Create an ESP report card")
pkgdown::build_site()
.Last.error
NEesp::find_files("shiny")
cd("shiny")
shiny::runApp("shiny")
