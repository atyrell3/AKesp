id_cols = c(.data$CATEGORY, .data$name),
names_from = .data$YEAR,
values_from = .data$status
) %>%
dplyr::rename(Indicator = .data$name,
"Indicator category" = .data$CATEGORY)
color_dat <- dat %>%
dplyr::select(.data$CATEGORY, .data$name, .data$YEAR, .data$status,
.data$SIGN, .data$color)
#
#   for (i in 1:nrow(color_dat)) {
#     if(is.na(color_dat$SIGN[i])){
#       color_dat$color[i] <- "white"
#     } else if (color_dat$status[i] == "low" & color_dat$SIGN[i] == -1) {
#       color_dat$color[i] <- "cornflowerblue"
#     } else if (color_dat$status[i] == "high" & color_dat$SIGN[i] == 1) {
#       color_dat$color[i] <- "cornflowerblue"
#     } else if (color_dat$status[i] == "high" & color_dat$SIGN[i] == -1) {
#       color_dat$color[i] <- "brown1"
#     } else if (color_dat$status[i] == "low" & color_dat$SIGN[i] == 1) {
#       color_dat$color[i] <- "brown1"
#     }
#   }
color_dat <- color_dat %>%
tidyr::pivot_wider(
id_cols = c(.data$CATEGORY, .data$name),
names_from = .data$YEAR,
values_from = .data$color,
values_fill = "grey80"
) %>%
dplyr::rename(Indicator = .data$name)
colnames(tbl_dat)[3:ncol(tbl_dat)] <- paste(colnames(tbl_dat)[3:ncol(tbl_dat)], "Status")
flextable::set_flextable_defaults(na_str = "NA")
ft <- flextable::flextable(tbl_dat) %>%
flextable::theme_vanilla() %>%
flextable::set_caption(caption = cap) %>%
flextable::autofit() %>%
flextable::align(align = "center", j = 3:ncol(tbl_dat))
for (j in 3:ncol(tbl_dat)) {
for (i in seq_len(nrow(tbl_dat))) {
ft <- flextable::bg(ft, i = i, j = j, bg = as.character(color_dat[i, j]))
}
}
ft <- ft %>%
flextable::merge_v(j = 1)
return(ft)
}
esp_traffic_tab_long(data, year = c(2020, 2021))
?dplyr::arrange
levels(data$CATEGORY)
factors(data$CATEGORY)
factor(data$CATEGORY)
esp_traffic_tab_long <- function(data, year, cap = "Traffic light scoring") {
data$CATEGORY <- factor(data$CATEGORY, c("Physical", "Lower Trophic",
"Upper Trophic", "Fishery Performance",
"Economic", "Community"))
dat <- data %>%
dplyr::group_by(.data$INDICATOR_NAME) %>%
dplyr::mutate(
name = .data$INDICATOR_NAME %>%
stringr::str_replace_all("_", " "),
this_year = (.data$YEAR %in% year),
avg = mean(.data$DATA_VALUE,
na.rm = TRUE
),
stdev = stats::sd(.data$DATA_VALUE,
na.rm = TRUE
)
) %>%
dplyr::filter(.data$this_year == TRUE) %>%
dplyr::select(.data$CATEGORY, .data$YEAR, .data$name, .data$DATA_VALUE,
.data$avg, .data$stdev, .data$SIGN) %>%
dplyr::arrange(.data$CATEGORY, .data$name)
status <- c()
color <- c()
for (i in seq_len(nrow(dat))) {
# print(data$SIGN[i])
if (is.na(dat$DATA_VALUE[i])) {
status[i] <- "NA"
color[i] <- "gray80"
} else if (dat$DATA_VALUE[i] > (dat$avg[i] + dat$stdev[i])) {
status[i] <- "high"
if(is.na(dat$SIGN[i])){
color[i] <- "white"
} else if(dat$SIGN[i] == 1){
color[i] <- "cornflowerblue"
} else if(dat$SIGN[i] == -1){
color[i] <- "brown1"
}
} else if (dat$DATA_VALUE[i] < (dat$avg[i] - dat$stdev[i])) {
status[i] <- "low"
if(is.na(dat$SIGN[i])){
color[i] <- "white"
} else if(dat$SIGN[i] == -1){
color[i] <- "cornflowerblue"
} else if(dat$SIGN[i] == 1){
color[i] <- "brown1"
}
} else {
status[i] <- "neutral"
color[i] <- "white"
}
}
# message(status)
#  message(color)
dat$status <- status
dat$color <- color
# color of cell = SIGN
# words in cell = status
tbl_dat <- dat %>%
dplyr::select(.data$CATEGORY, .data$name, .data$YEAR, .data$status) %>%
tidyr::pivot_wider(
id_cols = c(.data$CATEGORY, .data$name),
names_from = .data$YEAR,
values_from = .data$status
) %>%
dplyr::rename(Indicator = .data$name,
"Indicator category" = .data$CATEGORY)
color_dat <- dat %>%
dplyr::select(.data$CATEGORY, .data$name, .data$YEAR, .data$status,
.data$SIGN, .data$color)
#
#   for (i in 1:nrow(color_dat)) {
#     if(is.na(color_dat$SIGN[i])){
#       color_dat$color[i] <- "white"
#     } else if (color_dat$status[i] == "low" & color_dat$SIGN[i] == -1) {
#       color_dat$color[i] <- "cornflowerblue"
#     } else if (color_dat$status[i] == "high" & color_dat$SIGN[i] == 1) {
#       color_dat$color[i] <- "cornflowerblue"
#     } else if (color_dat$status[i] == "high" & color_dat$SIGN[i] == -1) {
#       color_dat$color[i] <- "brown1"
#     } else if (color_dat$status[i] == "low" & color_dat$SIGN[i] == 1) {
#       color_dat$color[i] <- "brown1"
#     }
#   }
color_dat <- color_dat %>%
tidyr::pivot_wider(
id_cols = c(.data$CATEGORY, .data$name),
names_from = .data$YEAR,
values_from = .data$color,
values_fill = "grey80"
) %>%
dplyr::rename(Indicator = .data$name)
colnames(tbl_dat)[3:ncol(tbl_dat)] <- paste(colnames(tbl_dat)[3:ncol(tbl_dat)], "Status")
flextable::set_flextable_defaults(na_str = "NA")
ft <- flextable::flextable(tbl_dat) %>%
flextable::theme_vanilla() %>%
flextable::set_caption(caption = cap) %>%
flextable::autofit() %>%
flextable::align(align = "center", j = 3:ncol(tbl_dat))
for (j in 3:ncol(tbl_dat)) {
for (i in seq_len(nrow(tbl_dat))) {
ft <- flextable::bg(ft, i = i, j = j, bg = as.character(color_dat[i, j]))
}
}
ft <- ft %>%
flextable::merge_v(j = 1)
return(ft)
}
# AKFIN data doesn't have `SCORE` yet, so doesn't run
devtools::load_all()
rmarkdown::render(here::here("inst/esp-report-card-template.Rmd"),
clean = FALSE,
params = list(esp_data = get_esp_data("Alaska Sablefish"),
fish = "Sablefish",
region = "Alaska"))
head(data)
esp_traffic_tab_long <- function(data, year, cap = "Traffic light scoring") {
data$CATEGORY <- factor(data$CATEGORY, c("Physical", "Lower Trophic",
"Upper Trophic", "Fishery Performance",
"Economic", "Community"))
dat <- data %>%
dplyr::group_by(.data$INDICATOR_NAME) %>%
dplyr::mutate(
name = .data$INDICATOR_NAME %>%
stringr::str_replace_all("_", " "),
this_year = (.data$YEAR %in% year),
avg = mean(.data$DATA_VALUE,
na.rm = TRUE
),
stdev = stats::sd(.data$DATA_VALUE,
na.rm = TRUE
)
) %>%
dplyr::filter(.data$this_year == TRUE) %>%
dplyr::select(.data$CATEGORY, .data$YEAR, .data$name, .data$DATA_VALUE,
.data$avg, .data$stdev, .data$SIGN) %>%
dplyr::arrange(.data$CATEGORY, .data$name)
status <- c()
color <- c()
for (i in seq_len(nrow(dat))) {
# print(data$SIGN[i])
if (is.na(dat$DATA_VALUE[i])) {
status[i] <- "NA"
color[i] <- "gray80"
} else if (dat$DATA_VALUE[i] > (dat$avg[i] + dat$stdev[i])) {
status[i] <- "high"
if(is.na(dat$SIGN[i])){
color[i] <- "white"
} else if(dat$SIGN[i] == 1){
color[i] <- "cornflowerblue"
} else if(dat$SIGN[i] == -1){
color[i] <- "brown1"
}
} else if (dat$DATA_VALUE[i] < (dat$avg[i] - dat$stdev[i])) {
status[i] <- "low"
if(is.na(dat$SIGN[i])){
color[i] <- "white"
} else if(dat$SIGN[i] == -1){
color[i] <- "cornflowerblue"
} else if(dat$SIGN[i] == 1){
color[i] <- "brown1"
}
} else {
status[i] <- "neutral"
color[i] <- "white"
}
}
# message(status)
#  message(color)
dat$status <- status
dat$color <- color
# color of cell = SIGN
# words in cell = status
tbl_dat <- dat %>%
dplyr::select(.data$CATEGORY, .data$name, .data$YEAR, .data$status) %>%
tidyr::pivot_wider(
id_cols = c(.data$CATEGORY, .data$name),
names_from = .data$YEAR,
values_from = .data$status,
names_sort = TRUE
) %>%
dplyr::rename(Indicator = .data$name,
"Indicator category" = .data$CATEGORY)
color_dat <- dat %>%
dplyr::select(.data$CATEGORY, .data$name, .data$YEAR, .data$status,
.data$SIGN, .data$color)
#
#   for (i in 1:nrow(color_dat)) {
#     if(is.na(color_dat$SIGN[i])){
#       color_dat$color[i] <- "white"
#     } else if (color_dat$status[i] == "low" & color_dat$SIGN[i] == -1) {
#       color_dat$color[i] <- "cornflowerblue"
#     } else if (color_dat$status[i] == "high" & color_dat$SIGN[i] == 1) {
#       color_dat$color[i] <- "cornflowerblue"
#     } else if (color_dat$status[i] == "high" & color_dat$SIGN[i] == -1) {
#       color_dat$color[i] <- "brown1"
#     } else if (color_dat$status[i] == "low" & color_dat$SIGN[i] == 1) {
#       color_dat$color[i] <- "brown1"
#     }
#   }
color_dat <- color_dat %>%
tidyr::pivot_wider(
id_cols = c(.data$CATEGORY, .data$name),
names_from = .data$YEAR,
values_from = .data$color,
values_fill = "grey80",
names_sort = TRUE
) %>%
dplyr::rename(Indicator = .data$name)
colnames(tbl_dat)[3:ncol(tbl_dat)] <- paste(colnames(tbl_dat)[3:ncol(tbl_dat)], "Status")
flextable::set_flextable_defaults(na_str = "NA")
ft <- flextable::flextable(tbl_dat) %>%
flextable::theme_vanilla() %>%
flextable::set_caption(caption = cap) %>%
flextable::autofit() %>%
flextable::align(align = "center", j = 3:ncol(tbl_dat))
for (j in 3:ncol(tbl_dat)) {
for (i in seq_len(nrow(tbl_dat))) {
ft <- flextable::bg(ft, i = i, j = j, bg = as.character(color_dat[i, j]))
}
}
ft <- ft %>%
flextable::merge_v(j = 1)
return(ft)
}
# AKFIN data doesn't have `SCORE` yet, so doesn't run
devtools::load_all()
rmarkdown::render(here::here("inst/esp-report-card-template.Rmd"),
clean = FALSE,
params = list(esp_data = get_esp_data("Alaska Sablefish"),
fish = "Sablefish",
region = "Alaska"))
# AKFIN data doesn't have `SCORE` yet, so doesn't run
devtools::load_all()
rmarkdown::render(here::here("inst/esp-report-card-template.Rmd"),
clean = FALSE,
params = list(esp_data = get_esp_data("Alaska Sablefish"),
fish = "Sablefish",
region = "Alaska"))
# example rendering of ESP report card
# AKFIN data doesn't have `SCORE` yet, so doesn't run
devtools::load_all()
rmarkdown::render(here::here("inst/esp-report-card-template.Rmd"),
clean = FALSE,
params = list(esp_data = get_esp_data("Alaska Sablefish"),
fish = "Sablefish",
region = "Alaska"))
# example rendering of ESP report card
# AKFIN data doesn't have `SCORE` yet, so doesn't run
devtools::load_all()
rmarkdown::render(here::here("inst/esp-report-card-template.Rmd"),
clean = FALSE,
params = list(esp_data = get_esp_data("Alaska Sablefish"),
fish = "Sablefish",
region = "Alaska"))
# example rendering of ESP report card
# AKFIN data doesn't have `SCORE` yet, so doesn't run
devtools::load_all()
rmarkdown::render(here::here("inst/esp-report-card-template.Rmd"),
clean = FALSE,
params = list(esp_data = get_esp_data("Alaska Sablefish"),
fish = "Sablefish",
region = "Alaska"))
# example rendering of ESP report card
# AKFIN data doesn't have `SCORE` yet, so doesn't run
devtools::load_all()
rmarkdown::render(here::here("inst/esp-report-card-template.Rmd"),
clean = FALSE,
params = list(esp_data = get_esp_data("Alaska Sablefish"),
fish = "Sablefish",
region = "Alaska"))
?thee
?theme
# example rendering of ESP report card
# AKFIN data doesn't have `SCORE` yet, so doesn't run
devtools::load_all()
rmarkdown::render(here::here("inst/esp-report-card-template.Rmd"),
clean = FALSE,
params = list(esp_data = get_esp_data("Alaska Sablefish"),
fish = "Sablefish",
region = "Alaska"))
# example rendering of ESP report card
# AKFIN data doesn't have `SCORE` yet, so doesn't run
devtools::load_all()
rmarkdown::render(here::here("inst/esp-report-card-template.Rmd"),
clean = FALSE,
params = list(esp_data = get_esp_data("Alaska Sablefish"),
fish = "Sablefish",
region = "Alaska"))
devtools::load_all()
rmarkdown::render(here::here("inst/esp-report-card-template.Rmd"),
clean = FALSE,
params = list(esp_data = get_esp_data("Alaska Sablefish"),
fish = "Sablefish",
region = "Alaska"))
devtools::load_all()
rmarkdown::render(here::here("inst/esp-report-card-template.Rmd"),
clean = FALSE,
params = list(esp_data = get_esp_data("Alaska Sablefish"),
fish = "Sablefish",
region = "Alaska"))
devtools::load_all()
rmarkdown::render(here::here("inst/esp-report-card-template.Rmd"),
clean = FALSE,
params = list(esp_data = get_esp_data("Alaska Sablefish"),
fish = "Sablefish",
region = "Alaska"))
# AKFIN data doesn't have `SCORE` yet, so doesn't run
devtools::load_all()
rmarkdown::render(here::here("inst/esp-report-card-template.Rmd"),
clean = FALSE,
params = list(esp_data = get_esp_data("Alaska Sablefish"),
fish = "Sablefish",
region = "Alaska",
stock_image = "images/noaa.jpg",
con_model_path = "images/noaa.jpg",
bayes_path = "images/noaa.jpg"))
# AKFIN data doesn't have `SCORE` yet, so doesn't run
devtools::load_all()
rmarkdown::render(here::here("inst/esp-report-card-template.Rmd"),
clean = FALSE,
params = list(esp_data = get_esp_data("Alaska Sablefish"),
fish = "Sablefish",
region = "Alaska",
stock_image = "images/noaa.jpg",
con_model_path = "images/noaa.jpg",
bayes_path = "images/noaa.jpg"))
# AKFIN data doesn't have `SCORE` yet, so doesn't run
devtools::load_all()
rmarkdown::render(here::here("inst/esp-report-card-template.Rmd"),
clean = FALSE,
params = list(esp_data = get_esp_data("Alaska Sablefish"),
fish = "Sablefish",
region = "Alaska",
stock_image = "images/noaa.jpg",
con_model_path = "images/noaa.jpg",
bayes_path = "images/noaa.jpg"))
roxygen2::roxygenise()
styler::style_dir("R")
NEesp::find_files("label_status")
esp_traffic_long <- function(data,
name,
out = "ggplot",
paginate = FALSE,
label = TRUE,
caption = "",
...) {
maxyear <- max(data$YEAR)
minyear <- maxyear - 1
dat <- prep_ind_data(data)
plt <- ggplot2::ggplot(
dat,
ggplot2::aes(
x = .data$YEAR,
y = .data$DATA_VALUE,
group = name
)
) +
ggplot2::geom_rect(
data = dat %>%
dplyr::filter(.data$recent == TRUE),
ggplot2::aes(
xmin = min(.data$YEAR) + 0.5,
xmax = max(.data$YEAR) + 0.5,
ymin = .data$quant10,
ymax = .data$quant90,
group = name
),
fill = "lightgreen"
) +
ggplot2::geom_line(ggplot2::aes(
x = .data$YEAR,
y = .data$quant10
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_line(ggplot2::aes(
x = .data$YEAR,
y = .data$quant90
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_line(ggplot2::aes(
x = .data$YEAR,
y = .data$mean
),
color = "darkgreen",
linetype = "dotted"
) +
ggplot2::geom_point() +
ggplot2::geom_line(data = dat %>%
tidyr::drop_na(.data$DATA_VALUE)) +
ggplot2::geom_label(
data = dat %>%
dplyr::filter(.data$YEAR == maxyear),
ggplot2::aes(
label = .data$label,
y = .data$mean,
fill = .data$score
),
nudge_x = 3,
show.legend = FALSE
) +
# set label colors based on score
ggplot2::scale_fill_manual(values = c("-1" = "brown1",
"1" = "cornflowerblue",
"0" = "beige")) +
ggplot2::ylab("") +
ggplot2::scale_y_continuous(labels = scales::comma) +
ggplot2::theme_bw(base_size = 16) +
ggplot2::xlim(c(min(dat$YEAR), max(dat$YEAR) + 4))
finish_fig <- function() {
if (label) {
plt <- plt %>%
AKesp::label_facets(open = "", close = "")
}
if (out == "save") {
ggplot2::ggsave(plt, filename = paste0(name, "_page", i, ".png"), ...)
} else if (out == "ggplot") {
print(plt)
cat("\n\n")
cat("##### Figure \\@ref(fig:traffic).", caption, "{-}")
cat("\n\n")
} else {
stop("Please specify output format")
}
}
if (paginate == TRUE) {
nfacet <- length(unique(dat$name))
n <- ceiling(nfacet / 5)
for (i in 1:n) {
plt <- plt +
ggforce::facet_wrap_paginate(~name,
ncol = 1,
nrow = 5,
scales = "free_y",
page = i
)
finish_fig()
}
} else {
plt <- plt +
ggplot2::facet_wrap(~name,
ncol = 1,
scales = "free_y"
)
finish_fig()
}
}
devtools::load_all()
rmarkdown::render(here::here("inst/esp-report-card-template.Rmd"),
clean = FALSE,
params = list(esp_data = get_esp_data("Alaska Sablefish"),
fish = "Sablefish",
region = "Alaska",
stock_image = "images/noaa.jpg",
con_model_path = "images/noaa.jpg",
bayes_path = "images/noaa.jpg"))
?rmarkdown::render
